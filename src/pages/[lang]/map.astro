---
import 'mapbox-gl/dist/mapbox-gl.css';
import Layout from '@/layouts/Layout.astro';
import { Separator } from '@/components/ui/separator';
import BuildingLayersToggle from '@/components/map/BuildingLayersToggle';
import BuildingInformation from '@/components/map/BuildingInformation';
import SearchBar from '@/components/map/SearchBar';
import ResetViewGroup from '@/components/map/ResetViewGroup';

export function getStaticPaths() {
  return [{ params: { lang: 'en' } }, { params: { lang: 'ko' } }];
}

import { getLangFromUrl, useTranslations } from '@/i18n/utils';
import LanguagePicker from '@/components/map/LanguagePicker.astro';
import ThemePicker from '@/components/ThemePicker';
import { Toaster } from '@/components/ui/sonner';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Layout title={t('site.map')}>
  <h1 class="sr-only">
    {t('site.title')}&nbsp;
    {t('site.map')}
  </h1>
  <div id="map" class="h-screen w-screen"></div>
  <BuildingInformation client:load lang={lang} />
  <div class="fixed bottom-0 w-full border-t main-bg px-4 py-2">
    <div class="mb-2 flex items-center justify-between gap-3">
      <div class="shrink-0">
        <img
          class="hidden h-8 dark:block"
          src={lang === 'en'
            ? '/yonsei-logo-dark.png'
            : '/yonsei-logo-dark-ko.png'}
          alt="Yonsei University"
        />
        <img
          class="block h-8 dark:hidden"
          src={lang === 'en'
            ? '/yonsei-logo-light.png'
            : '/yonsei-logo-light-ko.png'}
          alt="Yonsei University"
        />
      </div>
      <SearchBar client:load lang={lang} />
      <div class="flex items-center gap-2">
        <BuildingLayersToggle lang={lang} client:load />
        <Separator orientation="vertical" className="h-6!" />
        <ResetViewGroup lang={lang} client:only="react" />
      </div>
    </div>
    <div
      class="mt-2.5 flex items-center justify-start gap-2 text-xs text-muted-foreground/70"
    >
      <a
        class="transition-colors hover:text-muted-foreground"
        href={`/${lang}/`}
      >
        {t('site.title')}
      </a>
      <Separator orientation="vertical" className="h-3!" />
      <LanguagePicker />
      <Separator orientation="vertical" className="h-3!" />
      <ThemePicker
        className="size-4 bg-transparent hover:bg-transparent! [&>svg]:size-4"
        client:load
      />
    </div>
  </div>
  <script>
    import { buildingLayer, selectedCampus, selectedId } from '@/store';
    import mapboxgl, {
      type DataDrivenPropertyValueSpecification,
    } from 'mapbox-gl';
    import {
      getAllBuildingIds,
      getAllBuildings,
      getCameraForCampus,
      updateSelectedCampus,
      getNearestBuildingId,
    } from '@/lib/mapApi';
    import type { BuildingLayerType } from '@/types/map';
    import { createCustomLayer } from '@/lib/modelUtils';
    import { toast } from 'sonner';
    import { useTranslations } from '@/i18n/utils';

    const lang =
      document.querySelector('html')?.getAttribute('lang') === 'ko'
        ? 'ko'
        : 'en';
    const t = useTranslations(lang);

    mapboxgl.accessToken = import.meta.env.PUBLIC_MAPBOX_TOKEN;

    const initialCamera = getCameraForCampus(selectedCampus.get());

    const map = new mapboxgl.Map({
      style: 'mapbox://styles/mapbox/light-v11',
      container: 'map',
      antialias: true,
      attributionControl: false,
      logoPosition: 'top-right',
      minZoom: 14,
      maxZoom: 18,
      language: lang,
      ...initialCamera,
    });

    // Expose map instance to window
    window.map = map;

    map.addControl(new mapboxgl.AttributionControl(), 'top-left');
    map.addControl(new mapboxgl.ScaleControl(), 'bottom-right');
    map.addControl(new mapboxgl.NavigationControl(), 'top-right');

    // Add camera move listener to update selected campus
    map.on('moveend', () => {
      const center = map.getCenter();
      updateSelectedCampus(center.lng, center.lat);
    });

    const allBuildingIds = getAllBuildingIds();
    const allBuildingData = getAllBuildings();

    map.on('style.load', () => {
      // Insert the layer beneath any symbol layer.
      const layers = map.getStyle().layers;

      const labelLayerId = layers.find(
        (layer) =>
          layer.type === 'symbol' && layer.layout && layer.layout['text-field'],
      )?.id;

      if (!labelLayerId) {
        return;
      }

      const buildingHeights = Object.fromEntries(
        allBuildingData
          .filter((building) => Boolean(building.height))
          .map((building) => {
            const height = building.height || 0;
            const extrusionOffset = building.extrusionOffset || 0;
            const totalHeight = height + extrusionOffset;
            return [String(building.id), totalHeight];
          }),
      );

      const extrusionOffsets = Object.fromEntries(
        allBuildingData
          .filter((building) => Boolean(building.extrusionOffset))
          .map((building) => {
            return [String(building.id), building.extrusionOffset || 0];
          }),
      );

      const fillExtrusionHeightExpression: DataDrivenPropertyValueSpecification<number> =
        [
          'case',
          // Check if custom height exists in your dictionary
          ['has', ['to-string', ['id']], ['literal', buildingHeights]],
          // If it exists, use the custom height
          ['get', ['to-string', ['id']], ['literal', buildingHeights]],
          // Otherwise, fall back to OSM height data
          ['get', 'height'],
        ];

      const fillExtrusionBaseExpression: DataDrivenPropertyValueSpecification<number> =
        [
          'case',
          ['has', ['to-string', ['id']], ['literal', extrusionOffsets]],
          ['get', ['to-string', ['id']], ['literal', extrusionOffsets]],
          ['get', 'min_height'],
        ];

      // The 'building' layer in the Mapbox Streets
      // vector tileset contains building height data
      // from OpenStreetMap.
      map.addLayer(
        {
          id: 'osm-buildings',
          source: 'composite',
          'source-layer': 'building',
          filter: ['all', ['in', ['id'], ['literal', allBuildingIds]]],
          type: 'fill-extrusion',
          minzoom: 15,
          paint: {
            'fill-extrusion-color': '#aaa',

            // Use an 'interpolate' expression to
            // add a smooth transition effect to
            // the buildings as the user zooms in.
            'fill-extrusion-height': fillExtrusionHeightExpression,
            'fill-extrusion-base': fillExtrusionBaseExpression,
            'fill-extrusion-opacity': [
              'interpolate',
              ['linear'],
              ['zoom'],
              15,
              0, // Fully transparent at zoom 15
              15.05,
              1, // Fully opaque at zoom 15.05
            ],
          },
        },
        labelLayerId,
      );

      map.addLayer(
        {
          id: 'selected-building',
          source: 'composite',
          'source-layer': 'building',
          type: 'fill-extrusion',
          minzoom: 15,
          filter: ['all', ['in', ['id'], '']],
          layout: {
            visibility: 'none',
          },
          paint: {
            'fill-extrusion-color': '#003876',
            'fill-extrusion-height': fillExtrusionHeightExpression,
            'fill-extrusion-base': fillExtrusionBaseExpression,
            'fill-extrusion-opacity': [
              'interpolate',
              ['linear'],
              ['zoom'],
              15,
              0, // Fully transparent at zoom 15
              15.05,
              0.8, // Translucent at zoom 15.05
            ],
          },
        },
        labelLayerId,
      );

      const rhinoSimpleLayer = createCustomLayer({
        map: map,
        longitude: 126.939304,
        latitude: 37.566086,
        modelUrl: '/models/rhino-simple/model.gltf',
        id: 'rhino-simple',
        altitude: 96,
        rotateX: Math.PI / 2,
      });
      map.addLayer(rhinoSimpleLayer, labelLayerId);
    });

    map.on('click', (e) => {
      if (buildingLayer.get() !== 'osm') {
        const [longitude, latitude] = e.lngLat.toArray();
        const buildingId = getNearestBuildingId(longitude, latitude);
        selectedId.set(buildingId || '');
        return;
      }

      const features = map.queryRenderedFeatures(e.point, {
        layers: ['osm-buildings'], // make sure this matches your layer name
      });

      if (features.length) {
        const building = features[0];
        const buildingId = building.id;
        selectedId.set(buildingId || '');
      } else {
        selectedId.set('');
        map.setFilter('selected-building', ['==', ['id'], '']);
      }
    });

    const COLLEGE_OF_MEDICINE_IDS: Array<string | number> = [
      1178739301, 1178739302,
    ];

    selectedId.listen((selectedId) => {
      if (selectedId) {
        // If the selected ID is part of the College of Medicine buildings,
        // set the filter to include both buildings.
        if (COLLEGE_OF_MEDICINE_IDS.includes(selectedId)) {
          map.setFilter('selected-building', [
            'all',
            ['in', ['id'], ['literal', COLLEGE_OF_MEDICINE_IDS]],
          ]);
        } else {
          map.setFilter('selected-building', ['==', ['id'], selectedId]);
        }
        if (buildingLayer.get() == 'osm') {
          map.setLayoutProperty('selected-building', 'visibility', 'visible');
        }
      } else {
        map.setFilter('selected-building', ['==', ['id'], '']);
        map.setLayoutProperty('selected-building', 'visibility', 'none');
      }
    });

    const setBuildingLayer = (layer: BuildingLayerType) => {
      map.setLayoutProperty('osm-buildings', 'visibility', 'none');
      map.setLayoutProperty('selected-building', 'visibility', 'none');
      map.setLayoutProperty('rhino-simple', 'visibility', 'none');
      if (layer === 'osm') {
        map.setLayoutProperty('osm-buildings', 'visibility', 'visible');
        map.setLayoutProperty('selected-building', 'visibility', 'visible');
      } else if (layer === 'rhino-simple') {
        map.setLayoutProperty('rhino-simple', 'visibility', 'visible');
      }
    };

    map.on('style.load', () => {
      const initialBuildingLayer = buildingLayer.get();
      setBuildingLayer(initialBuildingLayer);
    });

    buildingLayer.listen((layer) => {
      if (!layer) {
        toast.warning(t('notify.no_model'), {
          duration: Infinity,
          id: 'no-model',
          dismissible: false,
        });
      } else {
        toast.dismiss('no-model');
      }

      setBuildingLayer(layer);
    });
  </script>
  <Toaster
    position="bottom-left"
    offset={{
      bottom: 88,
      left: 12,
    }}
    mobileOffset={{
      bottom: 88,
      left: 12,
    }}
    client:load
  />
</Layout>
