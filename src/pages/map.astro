---
import "mapbox-gl/dist/mapbox-gl.css";
import Layout from "@/layouts/Layout.astro";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { HomeIcon } from "lucide-react";
import BuildingLayersToggle from "@/components/BuildingLayersToggle";
import BuildingInformation from "@/components/BuildingInformation";
import SearchBar from "@/components/SearchBar";
---

<Layout>
  <h1 class="sr-only">Yonsei Digital Twin Map</h1>
  <div id="map" class="h-screen w-screen"></div>
  <BuildingInformation client:load />
  <div class="main-bg border-t absolute bottom-0 w-full py-2 px-4">
    <div class="flex justify-between items-center mb-2 gap-3">
      <div class="shrink-0">
        <img
          class="h-8 hidden dark:block"
          src="/yonsei-logo-dark.png"
          alt="Yonsei University"
        />
        <img
          class="h-8 block dark:hidden"
          src="/yonsei-logo-light.png"
          alt="Yonsei University"
        />
      </div>
      <SearchBar client:load />
      <div class="flex gap-2 items-center">
        <BuildingLayersToggle client:load />
        <Separator orientation="vertical" className="h-6!" />
        <Button variant="outline" id="reset-view">
          <HomeIcon />
          Sinchon
        </Button>
      </div>
    </div>
    <div class="flex justify-between mt-2.5 text-xs text-muted-foreground/70">
      <div>Yonsei Digital Twin</div>
    </div>
  </div>
  <script>
    import { buildingLayer, selectedId } from "@/store";
    import mapboxgl from "mapbox-gl";
    import sinchonBuildings from "@/data/buildings/sinchon.json";
    mapboxgl.accessToken = import.meta.env.PUBLIC_MAPBOX_TOKEN;

    const sinchonCenter: [number, number] = [126.9384, 37.5647];
    const initialCamera = {
      center: sinchonCenter,
      zoom: 15.5,
      pitch: 45,
      bearing: -17.6,
    };

    const map = new mapboxgl.Map({
      style: "mapbox://styles/mapbox/light-v11",
      container: "map",
      antialias: true,
      attributionControl: false,
      logoPosition: "top-right",
      minZoom: 14,
      ...initialCamera,
    });

    // Expose map instance to window
    window.map = map;

    map.addControl(new mapboxgl.AttributionControl(), "top-left");
    map.addControl(new mapboxgl.ScaleControl(), "bottom-right");

    map.on("style.load", () => {
      // Insert the layer beneath any symbol layer.
      const layers = map.getStyle().layers;

      const labelLayerId = layers.find(
        (layer) =>
          layer.type === "symbol" && layer.layout && layer.layout["text-field"],
      )?.id;

      if (!labelLayerId) {
        return;
      }

      const sinchonBuildingIds = sinchonBuildings.map(
        (building) => building.id,
      );

      // The 'building' layer in the Mapbox Streets
      // vector tileset contains building height data
      // from OpenStreetMap.
      map.addLayer(
        {
          id: "osm-buildings",
          source: "composite",
          "source-layer": "building",
          filter: ["all", ["in", ["id"], ["literal", sinchonBuildingIds]]],
          type: "fill-extrusion",
          minzoom: 15,
          paint: {
            "fill-extrusion-color": "#aaa",

            // Use an 'interpolate' expression to
            // add a smooth transition effect to
            // the buildings as the user zooms in.
            "fill-extrusion-height": [
              "interpolate",
              ["linear"],
              ["zoom"],
              15,
              0,
              15.05,
              ["get", "height"],
            ],
            "fill-extrusion-base": [
              "interpolate",
              ["linear"],
              ["zoom"],
              15,
              0,
              15.05,
              ["get", "min_height"],
            ],
            "fill-extrusion-opacity": 1,
          },
        },
        labelLayerId,
      );

      map.addLayer(
        {
          id: "selected-building",
          source: "composite",
          "source-layer": "building",
          type: "fill-extrusion",
          minzoom: 15,
          filter: ["all", ["in", ["id"], ""]],
          layout: {
            visibility: "none",
          },
          paint: {
            "fill-extrusion-color": "#003876",
            "fill-extrusion-height": [
              "interpolate",
              ["linear"],
              ["zoom"],
              15,
              0,
              15.05,
              ["get", "height"],
            ],
            "fill-extrusion-base": [
              "interpolate",
              ["linear"],
              ["zoom"],
              15,
              0,
              15.05,
              ["get", "min_height"],
            ],
            "fill-extrusion-opacity": 0.8,
          },
        },
        labelLayerId,
      );
    });

    map.on("click", (e) => {
      const features = map.queryRenderedFeatures(e.point, {
        layers: ["osm-buildings"], // make sure this matches your layer name
      });
      console.log(features);

      if (features.length) {
        const building = features[0];
        console.log("Building properties:", building.properties);

        // Try to access an ID if it exists
        const buildingId = building.id;
        selectedId.set(buildingId || "");
      } else {
        console.log("No building found at clicked point");
        selectedId.set("");
        map.setFilter("selected-building", ["==", ["id"], ""]);
      }
    });

    selectedId.listen((selectedId) => {
      if (selectedId) {
        map.setFilter("selected-building", ["==", ["id"], selectedId]);
        if (buildingLayer.get() == "osm") {
          map.setLayoutProperty("selected-building", "visibility", "visible");
        }
      } else {
        map.setFilter("selected-building", ["==", ["id"], ""]);
        map.setLayoutProperty("selected-building", "visibility", "none");
      }
    });

    buildingLayer.listen((layer) => {
      map.setLayoutProperty("osm-buildings", "visibility", "none");
      map.setLayoutProperty("selected-building", "visibility", "none");
      if (layer === "osm") {
        map.setLayoutProperty("selected-building", "visibility", "visible");
        map.setLayoutProperty("osm-buildings", "visibility", "visible");
      }
    });

    document.getElementById("reset-view")?.addEventListener("click", () => {
      map.flyTo(initialCamera);
    });
  </script>
</Layout>
