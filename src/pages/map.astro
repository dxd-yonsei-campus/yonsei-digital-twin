---
import "mapbox-gl/dist/mapbox-gl.css";
import Layout from "@/layouts/Layout.astro";
import { Button } from "@/components/ui/button";
import { HomeIcon } from "lucide-react";
import BuildingLayerToggle from "@/components/BuildingLayersToggle";
---

<Layout>
  <h1 class="sr-only">Yonsei Digital Twin Map</h1>
  <div id="map" class="h-screen w-screen"></div>
  <div class="bg-background border-t absolute bottom-0 w-full py-2 px-4">
    <div class="flex justify-between">
      <BuildingLayerToggle client:load />
      <Button id="reset-view">
        <HomeIcon />
        Sinchon
      </Button>
    </div>
    <div class="flex justify-between mt-1.5 text-sm text-muted-foreground">
      <div>Yonsei Digital Twin</div>
    </div>
  </div>
  <script>
    import { buildingLayer } from "@/store";
    import mapboxgl from "mapbox-gl";
    import sinchonBuildings from "src/data/buildings/sinchon.json";
    mapboxgl.accessToken = import.meta.env.PUBLIC_MAPBOX_TOKEN;

    const sinchonCenter: [number, number] = [126.9384, 37.5647];
    const initialCamera = {
      center: sinchonCenter,
      zoom: 15.5,
      pitch: 45,
      bearing: -17.6,
    };

    const map = new mapboxgl.Map({
      style: "mapbox://styles/mapbox/light-v11",
      container: "map",
      antialias: true,
      attributionControl: false,
      logoPosition: "top-right",
      minZoom: 14,
      ...initialCamera,
    });

    map.addControl(new mapboxgl.AttributionControl(), "top-left");
    map.addControl(new mapboxgl.ScaleControl(), "bottom-right");

    map.on("style.load", () => {
      // Insert the layer beneath any symbol layer.
      const layers = map.getStyle().layers;

      const labelLayerId = layers.find(
        (layer) =>
          layer.type === "symbol" && layer.layout && layer.layout["text-field"],
      )?.id;

      if (!labelLayerId) {
        return;
      }

      const sinchonBuildingIds = sinchonBuildings.map(
        (building) => building.id,
      );

      // The 'building' layer in the Mapbox Streets
      // vector tileset contains building height data
      // from OpenStreetMap.
      map.addLayer(
        {
          id: "add-3d-buildings",
          source: "composite",
          "source-layer": "building",
          filter: ["all", ["in", ["id"], ["literal", sinchonBuildingIds]]],
          type: "fill-extrusion",
          minzoom: 15,
          paint: {
            "fill-extrusion-color": "#aaa",

            // Use an 'interpolate' expression to
            // add a smooth transition effect to
            // the buildings as the user zooms in.
            "fill-extrusion-height": [
              "interpolate",
              ["linear"],
              ["zoom"],
              15,
              0,
              15.05,
              ["get", "height"],
            ],
            "fill-extrusion-base": [
              "interpolate",
              ["linear"],
              ["zoom"],
              15,
              0,
              15.05,
              ["get", "min_height"],
            ],
            "fill-extrusion-opacity": 1,
          },
        },
        labelLayerId,
      );
    });

    map.on("click", (e) => {
      const features = map.queryRenderedFeatures(e.point, {
        layers: ["add-3d-buildings"], // make sure this matches your layer name
      });
      console.log(features);

      if (features.length) {
        const building = features[0];
        console.log("Building properties:", building.properties);

        // Try to access an ID if it exists
        const buildingId = building.id;
        console.log("Building ID:", buildingId);
      } else {
        console.log("No building found at clicked point");
      }
    });

    buildingLayer.listen((layer) => {
      console.log(layer);
      map.setLayoutProperty("add-3d-buildings", "visibility", "none");
      if (layer === "osm") {
        map.setLayoutProperty("add-3d-buildings", "visibility", "visible");
      }
    });

    document.getElementById("reset-view")?.addEventListener("click", () => {
      map.flyTo(initialCamera);
    });
  </script>
</Layout>
